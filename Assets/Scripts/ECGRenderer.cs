using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ECGRenderer : MonoBehaviour {
    public static ECGRenderer Instance;
    
    [Header("Properties")]
    [SerializeField] ECGLine activeLine = ECGLine.Inactive;
    [SerializeField] bool isRendering = true;
    [Min(0.1f)]
    [SerializeField] float cycleTime = 5f;

    [Header("Component")]
    LineRenderer line;
    
    [Header("Data")]
    float[] PEA = {
        0.5f,        0.5f,        0.5f,        0.5f,        0.5f,        0.50526316f,
        0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.51578947f, 0.51578947f,
        0.52631579f, 0.53157895f, 0.54210526f, 0.55263158f, 0.55263158f, 0.55789474f,
        0.55789474f, 0.55789474f, 0.55789474f, 0.55263158f, 0.55263158f, 0.54210526f,
        0.53157895f, 0.52105263f, 0.51578947f, 0.51052632f, 0.50526316f, 0.50526316f,
        0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f,
        0.50526316f, 0.5f,        0.5f,        0.48421053f, 0.47368421f, 0.47368421f,
        0.51578947f, 0.6f,        0.69473684f, 0.78947368f, 0.89473684f, 0.94736842f,
        0.95789474f, 0.86842105f, 0.73684211f, 0.61052632f, 0.5f,        0.36842105f,
        0.35789474f, 0.36842105f, 0.39473684f, 0.43157895f, 0.46842105f, 0.48947368f,
        0.5f,        0.5f,        0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f,
        0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f,
        0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f, 0.50526316f,
        0.50526316f, 0.50526316f, 0.51052632f, 0.51052632f, 0.51578947f, 0.52105263f,
        0.52631579f, 0.53157895f, 0.53684211f, 0.54736842f, 0.55263158f, 0.55789474f,
        0.56842105f, 0.57368421f, 0.57894737f, 0.58421053f, 0.58947368f, 0.59473684f,
        0.59473684f, 0.59473684f, 0.6f,        0.6f,        0.6f,        0.6f,
        0.59473684f, 0.59473684f, 0.58947368f, 0.58947368f, 0.58421053f, 0.58421053f,
        0.57368421f, 0.56315789f, 0.55789474f, 0.54736842f, 0.53684211f, 0.52631579f,
        0.52105263f, 0.51578947f, 0.50526316f, 0.50526316f, 0.50526316f, 0.5f,
        0.5f,        0.5f,        0.5f,
    };
    float[] Asystole = {
        0.49852941f, 0.49852941f, 0.49852941f, 0.49852941f, 0.49852941f, 0.49852941f,
        0.50588235f, 0.50588235f, 0.50588235f, 0.50588235f, 0.50588235f, 0.50588235f,
        0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f,
        0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.52058824f,
        0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f,
        0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f,
        0.52058824f, 0.52058824f, 0.52058824f, 0.52794118f, 0.52794118f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52058824f, 0.52058824f, 0.52058824f, 0.51323529f,
        0.50588235f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f,
        0.51323529f, 0.51323529f, 0.52058824f, 0.51323529f, 0.51323529f, 0.51323529f,
        0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f, 0.51323529f,
        0.51323529f, 0.51323529f, 0.51323529f, 0.52058824f, 0.52058824f, 0.52058824f,
        0.52794118f, 0.52794118f, 0.53529412f, 0.53529412f, 0.54264706f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f,
        0.53529412f, 0.53529412f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.53529412f, 0.53529412f,
        0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.53529412f, 0.53529412f, 0.53529412f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f,
        0.53529412f, 0.54264706f, 0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f,
        0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.53529412f, 0.54264706f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f,
        0.54264706f, 0.54264706f, 0.54264706f, 0.54264706f, 0.53529412f, 0.53529412f,
        0.53529412f, 0.53529412f, 0.53529412f, 0.53529412f, 0.52794118f, 0.52794118f,
        0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f, 0.52794118f,
        0.52058824f, 0.52058824f, 0.52058824f, 0.52058824f, 0.51323529f, 0.51323529f,
        0.51323529f, 0.51323529f, 0.52058824f, 0.52794118f, 0.54264706f, 0.53529412f,
        0.55f,       0.55f,       0.55735294f, 0.55735294f, 0.55f,       0.55f,
        0.55f,       0.55f,       0.55f,       0.55f,       0.54264706f, 0.54264706f,
    };
    float[] VtVf = {
        0.45555556f, 0.44444444f, 0.43888889f, 0.43888889f, 0.47222222f, 0.52222222f,
        0.54444444f, 0.56666667f, 0.57777778f, 0.59444444f, 0.61111111f, 0.61666667f,
        0.61666667f, 0.61111111f, 0.6f,        0.57222222f, 0.53333333f, 0.52777778f,
        0.51666667f, 0.51666667f, 0.52222222f, 0.52222222f, 0.52222222f, 0.52777778f,
        0.55555556f, 0.58333333f, 0.61111111f, 0.69444444f, 0.77777778f, 0.87777778f,
        0.90555556f, 0.90555556f, 0.91111111f, 0.86111111f, 0.73333333f, 0.61111111f,
        0.47222222f, 0.42222222f, 0.36666667f, 0.35555556f, 0.35f,       0.35555556f,
        0.36666667f, 0.42222222f, 0.51111111f, 0.58888889f, 0.61666667f, 0.71111111f,
        0.76666667f, 0.8f,        0.80555556f, 0.8f,        0.79444444f, 0.77777778f,
        0.73333333f, 0.66111111f, 0.52222222f, 0.40555556f, 0.38888889f, 0.32777778f,
        0.31111111f, 0.31666667f, 0.33888889f, 0.42222222f, 0.50555556f, 0.52222222f,
        0.61666667f, 0.73333333f, 0.80555556f, 0.84444444f, 0.85555556f, 0.86111111f,
        0.83888889f, 0.78888889f, 0.67222222f, 0.51666667f, 0.43333333f, 0.38888889f,
        0.37222222f, 0.36666667f, 0.36666667f, 0.4f,        0.51111111f, 0.57777778f,
        0.6f,        0.70555556f, 0.79444444f, 0.84444444f, 0.86111111f, 0.87222222f,
        0.87777778f, 0.86111111f, 0.77777778f, 0.63888889f, 0.52222222f, 0.42777778f,
        0.37222222f, 0.35f,       0.32777778f, 0.32777778f, 0.36666667f, 0.44444444f,
        0.47777778f, 0.52222222f, 0.60555556f, 0.62222222f, 0.62777778f, 0.63333333f,
        0.62222222f, 0.58888889f, 0.48888889f, 0.40555556f, 0.38333333f, 0.37222222f,
        0.37222222f, 0.38333333f, 0.4f,        0.48888889f, 0.56111111f, 0.61666667f,
        0.68888889f, 0.8f,        0.83888889f, 0.84444444f, 0.85f,       0.82222222f,
        0.82222222f, 0.74444444f, 0.67777778f, 0.57222222f, 0.47222222f, 0.41111111f,
        0.36111111f, 0.31111111f, 0.30555556f, 0.30555556f, 0.32222222f, 0.37777778f,
        0.42777778f, 0.45555556f, 0.47222222f, 0.56666667f, 0.65f,       0.72222222f,
        0.76111111f, 0.8f,        0.80555556f, 0.8f,        0.76111111f, 0.67222222f,
        0.53333333f, 0.52222222f, 0.47222222f, 0.43888889f, 0.41666667f, 0.40555556f,
        0.41666667f, 0.48333333f, 0.5f,        0.56666667f, 0.63333333f, 0.73333333f,
        0.79444444f, 0.8f,        0.81111111f, 0.80555556f, 0.76111111f, 0.63333333f,
        0.5f,        0.41111111f, 0.39444444f, 0.32777778f, 0.30555556f, 0.31666667f,
        0.32222222f, 0.46666667f, 0.55555556f, 0.57222222f, 0.71111111f, 0.75555556f,
        0.77777778f, 0.78333333f, 0.77222222f, 0.76666667f, 0.72222222f, 0.71111111f,
        0.63888889f, 0.57222222f, 0.52222222f, 0.52222222f, 0.52222222f, 0.51666667f,
        0.52222222f, 0.54444444f, 0.58888889f, 0.6f,        0.65555556f, 0.70555556f,
        0.72777778f, 0.72777778f, 0.7f,        0.68333333f, 0.56666667f, 0.47222222f,
        0.41111111f, 0.36111111f, 0.31111111f, 0.27777778f, 0.26111111f, 0.25555556f,
        0.25f,       0.28333333f, 0.31666667f, 0.41666667f, 0.5f,        0.52777778f,
        0.58888889f, 0.65f,       0.67222222f, 0.67777778f, 0.67777778f, 0.66111111f,
    };

    void Awake() {
        if (!Instance) {
            Instance = this;
        } else {
            Debug.LogError("ECGRenderer already created!");
            Destroy(gameObject);
        }

        line = GetComponent<LineRenderer>();
    }

    void Start() {
        // Reset Line
        for (int i = 0; i < line.positionCount; i++) {
            line.SetPosition(i, new Vector3(.5f, i/(float)line.positionCount, 0));
        }

        // StartCoroutine(IERenderLine());
    }

    float ecgTime = 0;
    int ecgLineIndex = 0;
    int ecgLastIndex = 0;
    void Update() {
        // Is Rendering ECG Line?
        if (isRendering) {
            // Always add ECG time
            ecgTime += Time.deltaTime;

            // Reset ECG Line Back to Start
            if (ecgTime >= cycleTime) {
                ecgTime = 0;
                ecgLastIndex = 0;
            }

            // Calculate line index based on ECG Time
            int maxIndex = (int)Mathf.Lerp(0, line.positionCount, ecgTime/cycleTime);

            // Set the line
            for (int i = ecgLastIndex; i < maxIndex; i++) {
                // Determine ECG Line
                float outputHeight = .5f;
                if (activeLine == ECGLine.Asystole) {
                    if (ecgLineIndex >= Asystole.Length) ecgLineIndex = 0;
                    outputHeight = Asystole[ecgLineIndex];
                } else if (activeLine == ECGLine.PEA) {
                    if (ecgLineIndex >= PEA.Length) ecgLineIndex = 0;
                    outputHeight = PEA[ecgLineIndex];
                } else if (activeLine == ECGLine.VtVf) {
                    if (ecgLineIndex >= VtVf.Length) ecgLineIndex = 0;
                    outputHeight = VtVf[ecgLineIndex];
                }
                ecgLineIndex += 1;

                line.SetPosition(i, new Vector3(outputHeight, i/(float)line.positionCount, 0));
            }
            ecgLastIndex = maxIndex;
        }
    }

    void OnDestroy() {
        StopAllCoroutines();
    }

    // ============================= Public Function =============================

    public void ChangeECGLine(ECGLine ecgLine) {
        activeLine = ecgLine;
    }

    public void ChangeECGLine(int value) {
        activeLine = (ECGLine)value;
    }
}
